swagger: '2.0'
info:
  description: |
    Mushroom Cultivation System
  version: pre-alpha-1.0
  title: Mushroom++
paths:
  /defined/mushroom/stages:
    get:
      summary: returns the predifined list of possible mushroom developement stages
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              type: string
            example: ["Inoculation","Casing","Spawn Run","Pinning","Fruiting","Dead"]
  /defined/mushroom/types:
    get:
      summary: returns the predifined list of possible mushroom types
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              type: string
            example: ["Agaricus bisporus","Pleurotus","Lentinula edodes"]
  /token:
    get:
      summary: returns jwt, provided that the username and password is correct
      parameters:
      - in: header
        name: Authorization
        required: true
        type: string
        description: Basic Authorization
      produces:
      - text/plain
      responses:
        200:
          description: JSON Web Token using HS256 algorithm
          schema:
            example: Header.Payload.Signature
        403:
          description: Unauthorized
          schema:
            example: Incorrect credentials
  /user:
    post:
      summary: creates a new user
      parameters:
      - in: body
        name: User
        required: true
        description: User
        schema:
          $ref: '#/definitions/user'
      produces:
      - text/plain
      responses:
        200:
          description: Created
        409:
          description: "Conflict, descriptive error message detailing if the username is taken or invalid, or if the password is too weak or invalid."
          schema:
            example: "username \"Bob\" taken"
  /user/name/{username}:
    get:
      summary: returns the user with the given username
      parameters:
      - in: header
        name: Authorization
        required: true
        type: string
        description: Bearer Authorization
      - name: username
        in: path
        description: username of the user to return
        required: true
        type: string
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/user'
        403:
          description: Unauthorized
        404:
          description: Not Found
  /user/name:
    get:
      summary: returns the authenticated user
      parameters:
      - in: header
        name: Authorization
        required: true
        type: string
        description: Bearer Authorization
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/user'
        403:
          description: Unauthorized
  /user/key/{user_key}:
    delete:
      summary: deletes the user with the given key
      parameters:
      - in: header
        name: Authorization
        required: true
        type: string
        description: Bearer Authorization
      - name: user_key
        in: path
        description: key of the User
        required: true
        type: integer
      produces:
      - text/plain
      responses:
        200:
          description: Deleted
        403:
          description: Unauthorized
        404:
          description: Not Found
  /user/key/{user_key}/username:
    patch:
      summary: changes the username of the user with the given key
      parameters:
      - in: header
        name: Authorization
        required: true
        type: string
        description: Bearer Authorization
      - name: user_key
        in: path
        description: key of the User
        required: true
        type: integer
      - name: username
        in: body
        description: "new username\nUser Model could be used as it has this field, while the other fields can be ignored."
        required: true
        schema:
          type: object
          properties:
            username:
              type: string
              example: Bob
      produces:
      - text/plain
      responses:
        200:
          description: Username Changed
        403:
          description: Unauthorized
        404:
          description: Not Found
        409:
          description: "Conflict, descriptive error message detailing if the username is taken or invalid."
          schema:
            example: "username \"Bob\" taken"
  /user/key/{user_key}/password:
    patch:
      summary: changes the password of the user with the given key
      parameters:
      - in: header
        name: Authorization
        required: true
        type: string
        description: Bearer Authorization
      - name: user_key
        in: path
        description: key of the User
        required: true
        type: integer
      - name: password
        in: body
        description: "new password\nUser Model could be used as it has this field, while the other fields can be ignored."
        required: true
        schema:
          type: object
          properties:
            password:
              type: string
              example: kolbiharcos1234
      produces:
      - text/plain
      responses:
        200:
          description: Password Changed
        403:
          description: Unauthorized
        404:
          description: Not Found
        409:
          description: "Conflict, descriptive error message detailing if the password is too weak or invalid."
          schema:
            example: "the password is too short"
  /hardware:
    post:
      summary: registers a new hardware
      parameters:
      - in: header
        name: Authorization
        required: true
        type: string
        description: Bearer Authorization
      - in: body
        name: Hardware
        required: true
        description: Hardware
        schema:
          $ref: '#/definitions/hardware'
      produces:
      - text/plain
      responses:
        200:
          description: Registered
        403:
          description: Unauthorized
        409:
          description: "Conflict, descriptive error message detailing if the hardware_id is taken."
          schema:
            example: "hardware_id \"bobs_test_hardware_1\" taken"
    get:
      summary: returns the list of hardwares associated with the user
      parameters:
      - in: header
        name: Authorization
        required: true
        type: string
        description: Bearer Authorization
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/hardware'
        403:
          description: Unauthorized
  /hardware/key/{hardware_key}:
    get:
      summary: returns the hardware with the given key
      parameters:
      - in: header
        name: Authorization
        required: true
        type: string
        description: Bearer Authorization
      - name: hardware_key
        in: path
        description: key of the Hardware
        required: true
        type: integer
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/hardware'
        403:
          description: Unauthorized
        404:
          description: Not Found
    delete:
      summary: deletes the hardware with the given key
      parameters:
      - in: header
        name: Authorization
        required: true
        type: string
        description: Bearer Authorization
      - name: hardware_key
        in: path
        description: key of the Hardware
        required: true
        type: integer
      produces:
      - text/plain
      responses:
        200:
          description: Deleted
        403:
          description: Unauthorized
        404:
          description: Not Found
    put:
      summary: updates the hardware with the given key
      parameters:
      - in: header
        name: Authorization
        required: true
        type: string
        description: Bearer Authorization
      - name: hardware_key
        in: path
        description: key of the Hardware
        required: true
        type: integer
      - in: body
        name: Hardware
        required: true
        description: Hardware
        schema:
          $ref: '#/definitions/hardware'
      produces:
      - text/plain
      responses:
        200:
          description: Updated
        403:
          description: Unauthorized
        404:
          description: Not Found
        409:
          description: "Conflict, descriptive error message detailing if the hardware_id is taken."
          schema:
            example: "hardware_id \"bobs_test_hardware_1\" taken"
  /hardware/key/{hardware_key}/sensor:
    get:
      summary: returns the current sensor data of the hardware associated with the given hardware key (polls realtime)
      parameters:
      - in: header
        name: Authorization
        required: true
        type: string
        description: Bearer Authorization
      - name: hardware_key
        in: path
        description: key of the Hardware 
        required: true
        type: integer
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/sensor_entry'
        403:
          description: Unauthorized
        404:
          description: Not Found
  /specimen:
    post:
      summary: creates a new specimen
      parameters:
      - in: header
        name: Authorization
        required: true
        type: string
        description: Bearer Authorization
      - in: body
        name: Specimen
        required: true
        description: Specimen
        schema:
          $ref: '#/definitions/specimen'
      produces:
      - text/plain
      responses:
        200:
          description: Created
        403:
          description: Unauthorized
        409:
          description: "Conflict, descriptive error message detailing if the hardware_id is invalid, or the desired hardware_id already has an active specimen assigned, or if the specimen_type is invalid."
          schema:
            example: "hardware_id \"0123456789ABCDEF\" already has a specimen"
    get:
      summary: returns the list of active specimens associated with the user
      parameters:
      - in: header
        name: Authorization
        required: true
        type: string
        description: Bearer Authorization
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/specimen'
        403:
          description: Unauthorized
  /specimen/key/{specimen_key}:
    get:
      summary: returns the specimen with the given key
      parameters:
      - in: header
        name: Authorization
        required: true
        type: string
        description: Bearer Authorization
      - name: specimen_key
        in: path
        description: key of the Specimen
        required: true
        type: integer
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/specimen'
        403:
          description: Unauthorized (can be because of the Specimen is marked as inactive, aka discarded, aka deleted)
        404:
          description: Not Found
    delete:
      summary: deletes (marks as inactive, aka discards) the specimen with the given key
      parameters:
      - in: header
        name: Authorization
        required: true
        type: string
        description: Bearer Authorization
      - name: specimen_key
        in: path
        description: key of the Specimen
        required: true
        type: integer
      produces:
      - text/plain
      responses:
        200:
          description: Deleted
        403:
          description: Unauthorized (can be because of the Specimen is marked as inactive, aka discarded, aka deleted)
        404:
          description: Not Found
    put:
      summary: updates the specimen with the given key
      parameters:
      - in: header
        name: Authorization
        required: true
        type: string
        description: Bearer Authorization
      - name: specimen_key
        in: path
        description: key of the Specimen
        required: true
        type: integer
      - in: body
        name: Specimen
        required: true
        description: Specimen
        schema:
          $ref: '#/definitions/specimen'
      produces:
      - text/plain
      responses:
        200:
          description: Updated
        403:
          description: Unauthorized (can be because of the Specimen is marked as inactive, aka discarded, aka deleted)
        404:
          description: Not Found
        409:
          description: "Conflict, descriptive error message detailing if the hardware_id is invalid, or the desired hardware_id already has an active specimen assigned, or if the specimen_type is invalid."
          schema:
            example: "hardware_id \"bobs_test_hardware_1\" not found"
  /specimen/key/{specimen_key}/sensor:
    get:
      summary: returns the sensor history associated with the given specimen key (can be filtered further with query strings)
      parameters:
      - in: header
        name: Authorization
        required: true
        type: string
        description: Bearer Authorization
      - name: specimen_key
        in: path
        description: key of the Specimen
        required: true
        type: integer
      - name: datetime_from
        in: query
        description: "Filter data based on a timespan.\nUnix datetime format: number of milliseconds since the standard base time January 1, 1970, 00:00:00 GMT."
        required: false
        type: integer
      - name: datetime_until
        in: query
        description: "Filter data based on a timespan.\nUnix datetime format: number of milliseconds since the standard base time January 1, 1970, 00:00:00 GMT."
        required: false
        type: integer
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/sensor_entry'
        403:
          description: Unauthorized (can be because of the Specimen is marked as inactive, aka discarded, aka deleted)
        404:
          description: Not Found
  /specimen/key/{specimen_key}/status:
    post:
      summary: creates a new status entry associated with the specimen with the given key
      parameters:
      - in: header
        name: Authorization
        required: true
        type: string
        description: Bearer Authorization
      - name: specimen_key
        in: path
        description: key of the Specimen
        required: true
        type: integer
      - in: body
        name: Status Entry
        required: true
        description: Status Entry
        schema:
          $ref: '#/definitions/status_entry'
      produces:
      - text/plain
      responses:
        200:
          description: Created
        403:
          description: Unauthorized (can be because of the Specimen is marked as inactive, aka discarded, aka deleted)
        404:
          description: Not Found
        409:
          description: "Conflict, descriptive error message detailing if the stage_name is invalid."
          schema:
            example: "stage_name \"Fruiting\" is invalid"
    get:
      summary: returns the list status entries associated with the specimen with the given key
      parameters:
      - in: header
        name: Authorization
        required: true
        type: string
        description: Bearer Authorization
      - name: specimen_key
        in: path
        description: key of the Specimen
        required: true
        type: integer
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            type: array
            items:
              $ref: '#/definitions/status_entry'
        403:
          description: Unauthorized (can be because of the Specimen is marked as inactive, aka discarded, aka deleted)
        404:
          description: Not Found
  /status/key/{status_key}:
    get:
      summary: returns the status entry with the given key
      parameters:
      - in: header
        name: Authorization
        required: true
        type: string
        description: Bearer Authorization
      - name: status_key
        in: path
        description: key of the Status Entry
        required: true
        type: integer
      produces:
      - application/json
      responses:
        200:
          description: Ok
          schema:
            $ref: '#/definitions/status_entry'
        403:
          description: Unauthorized (can be because of the associated Specimen is marked as inactive, aka discarded, aka deleted)
        404:
          description: Not Found
    delete:
      summary: deletes the status entry with the given key
      parameters:
      - in: header
        name: Authorization
        required: true
        type: string
        description: Bearer Authorization
      - name: status_key
        in: path
        description: key of the Status Entry
        required: true
        type: integer
      produces:
      - text/plain
      responses:
        200:
          description: Deleted
        403:
          description: Unauthorized (can be because of the associated Specimen is marked as inactive, aka discarded, aka deleted)
        404:
          description: Not Found
    put:
      summary: updates the status entry with the given key
      parameters:
      - in: header
        name: Authorization
        required: true
        type: string
        description: Bearer Authorization
      - name: status_key
        in: path
        description: key of the Status Entry
        required: true
        type: integer
      - in: body
        name: Status Entry
        required: true
        description: Status Entry
        schema:
          $ref: '#/definitions/status_entry'
      produces:
      - text/plain
      responses:
        200:
          description: Updated
        403:
          description: Unauthorized (can be because of the associated Specimen is marked as inactive, aka discarded, aka deleted)
        404:
          description: Not Found
        409:
          description: "Conflict, descriptive error message detailing if the stage_name is invalid."
          schema:
            example: "stage_name \"Fruiting\" is invalid"

definitions:
  
  user:
    type: object
    properties:
      user_key:
        description: "Nullable.\nReadonly value. (automatically generated on POST method)"
        type: integer
        example: 0
      username:
        description: ""
        type: string
        example: Bob
      password:
        description: "Nullable (used only in POST method)."
        type: string
        example: kolbiharcos1234
      user_type:
        description: "Nullable.\nReadonly value.\nAdmin or User (or possibly other future roles)"
        type: string
        example: User
  hardware:
    type: object
    properties:
      hardware_key:
        description: "Nullable.\nReadonly value. (automatically generated on POST method)"
        type: integer
        example: 0
      hardware_id:
        description: "16 characters long HEX string, representing 64bit LoRaWAN id"
        type: string
        example: "0123456789ABCDEF"
      specimen_key:
        description: "Nullable\nReadonly value."
        type: integer
        example: 0
      desired_air_temperature:
        description: "Nullable\nReadonly value."
        type: number
        example: 21.7
      desired_air_humidity:
        description: "Nullable\nReadonly value."
        type: number
        example: 1.2
      desired_air_co2:
        description: "Nullable\nReadonly value."
        type: number
        example: 1.2
  specimen:
    type: object
    properties:
      specimen_key:
        description: "Nullable.\nReadonly value. (automatically generated on POST method)"
        type: integer
        example: 0
      planted_date:        
        description: "Readonly value.\nUnix datetime format: number of milliseconds since the standard base time January 1, 1970, 00:00:00 GMT."
        type: integer
        example: 1492992000000
      specimen_name:
        description: "User specified name."
        type: string
        example: "Champignon Test Cultivation Instance 1"
      specimen_type:
        description: "Type of mushroom (must be from the predefined list)."
        type: string
        example: "Champignon"
      specimen_description:
        description: "User specified description (notes)."
        type: string
        example: "Seeds are from AliExpress."
      desired_air_temperature:
        description: "Nullable, User specified value, also changes the assigned hardware's value."
        type: number
        example: 21.7
      desired_air_humidity:
        description: "Nullable, User specified value, also changes the assigned hardware's value."
        type: number
        example: 1.2
      desired_air_co2:
        description: "Nullable, User specified value, also changes the assigned hardware's value."
        type: number
        example: 1.2
      hardware_id:
        description: "Nullable.\nUser specified value, must be from the list of hardware ids associated with the user, or null."
        type: string
        example: "0123456789ABCDEF"
  sensor_entry:
    type: object
    properties:
      entry_key:
        description: "Nullabe (only used in history, not real time polling).\nReadonly value."
        type: integer
        example: 0
      entry_time:
        description: "Readonly value.\nUnix datetime format: number of milliseconds since the standard base time January 1, 1970, 00:00:00 GMT."
        type: integer
        example: 1492992000000
      air_temperature:
        description: "Readonly value."
        type: number
        example: 21.7
      air_humidity:
        description: "Readonly value."
        type: number
        example: 54.3
      air_co2:
        description: "Readonly value."
        type: number
        example: 1.2
      desired_air_temperature:
        description: "Nullable, Readonly value."
        type: number
        example: 21.7
      desired_air_humidity:
        description: "Nullable, Readonly value."
        type: number
        example: 1.2
      desired_air_co2:
        description: "Nullable, Readonly value."
        type: number
        example: 1.2
      ambient_air_temperature:
        description: "Readonly value."
        type: number
        example: 21.7
      ambient_air_humidity:
        description: "Readonly value."
        type: number
        example: 1.2
      ambient_air_co2:
        description: "Readonly value."
        type: number
        example: 1.2
      specimen_key:
        description: "Nullabe (only used in history, not real time polling).\nReadonly value.\nKey of the associated specimen."
        type: integer
        example: 145
  status_entry:
    type: object
    properties:
      entry_key:
        description: "Nullable.\nReadonly value. (automatically generated on POST method)"
        type: integer
        example: 0
      entry_time:
        description: "Nullable (default value is NOW in POST method).\nUnix datetime format: number of milliseconds since the standard base time January 1, 1970, 00:00:00 GMT."
        type: integer
        example: 1492992000000
      stage_name:
        description: "Stage of the developement (must be from the predefined list)"
        type: string
        example: "Fruiting"
      specimen_key:
        description: "Readonly value (can only be set in POST method).\nKey of the associated specimen."
        type: integer
        example: 145